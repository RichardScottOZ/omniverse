Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------


# Create criterion
criterion = criterion_pydantic_config.create_instance()
assert criterion.ignore_index == vocabulary.token_to_index[vocabulary.PAD]

# Create Scheduler noam
# TODO: this part is hardcoded in a way since we are using LambdaLR.
# I do not have time to make it more "automated" so this is anti-config-pattern.
warmup_steps = 3 * len(train_loader)

# lr first increases in the warmup steps, and then decays
noam = lambda step: noam_lr_decay(step, d_model=composer.model.d_model, warmup_steps=warmup_steps)  # noqa: E731

scheduler_config_cls = SCHEDULER_REGISTRY[cfg.scheduler.name]


if issubclass(scheduler_config_cls, LambdaLRConfig):
    scheduler_pydantic_config = scheduler_config_cls(lr_lambda=noam, **cfg.scheduler)
else:
    scheduler_pydantic_config = scheduler_config_cls(**cfg.scheduler)  # type: ignore[assignment]

assert composer.scheduler is MISSING  # now it is MISSING for us to fill up.
composer.scheduler = scheduler_pydantic_config
scheduler = scheduler_pydantic_config.build(optimizer=optimizer)

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[45], line 2[0m
[1;32m      1[0m [38;5;66;03m# Create criterion[39;00m
[0;32m----> 2[0m criterion [38;5;241m=[39m [43mcriterion_pydantic_config[49m[38;5;241m.[39mcreate_instance()
[1;32m      3[0m [38;5;28;01massert[39;00m criterion[38;5;241m.[39mignore_index [38;5;241m==[39m vocabulary[38;5;241m.[39mtoken_to_index[vocabulary[38;5;241m.[39mPAD]
[1;32m      5[0m [38;5;66;03m# Create Scheduler noam[39;00m
[1;32m      6[0m [38;5;66;03m# TODO: this part is hardcoded in a way since we are using LambdaLR.[39;00m
[1;32m      7[0m [38;5;66;03m# I do not have time to make it more "automated" so this is anti-config-pattern.[39;00m

[0;31mNameError[0m: name 'criterion_pydantic_config' is not defined

